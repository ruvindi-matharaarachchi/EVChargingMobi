// Generated by view binder compiler. Do not edit!
package com.evcharge.mobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.evcharge.mobile.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemBookingBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton btnModify;

  @NonNull
  public final MaterialButton btnViewQr;

  @NonNull
  public final Chip chipStatus;

  @NonNull
  public final TextView tvStationName;

  @NonNull
  public final TextView tvTime;

  private ItemBookingBinding(@NonNull MaterialCardView rootView, @NonNull MaterialButton btnModify,
      @NonNull MaterialButton btnViewQr, @NonNull Chip chipStatus, @NonNull TextView tvStationName,
      @NonNull TextView tvTime) {
    this.rootView = rootView;
    this.btnModify = btnModify;
    this.btnViewQr = btnViewQr;
    this.chipStatus = chipStatus;
    this.tvStationName = tvStationName;
    this.tvTime = tvTime;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemBookingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemBookingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_booking, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemBookingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_modify;
      MaterialButton btnModify = ViewBindings.findChildViewById(rootView, id);
      if (btnModify == null) {
        break missingId;
      }

      id = R.id.btn_view_qr;
      MaterialButton btnViewQr = ViewBindings.findChildViewById(rootView, id);
      if (btnViewQr == null) {
        break missingId;
      }

      id = R.id.chip_status;
      Chip chipStatus = ViewBindings.findChildViewById(rootView, id);
      if (chipStatus == null) {
        break missingId;
      }

      id = R.id.tv_station_name;
      TextView tvStationName = ViewBindings.findChildViewById(rootView, id);
      if (tvStationName == null) {
        break missingId;
      }

      id = R.id.tv_time;
      TextView tvTime = ViewBindings.findChildViewById(rootView, id);
      if (tvTime == null) {
        break missingId;
      }

      return new ItemBookingBinding((MaterialCardView) rootView, btnModify, btnViewQr, chipStatus,
          tvStationName, tvTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
